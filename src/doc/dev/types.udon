;>

All types can be found in `%whom/sur/whom/hoon`.

This section highlights a few types used in scries and subscriptions, for developers interested in consuming `%whom` contacts in their apps.

## contacts

```
+$  contacts  (map (each @p @t) contact)
```

A map of all the user's contacts.
Each key is either a `@p` or a `@t`.
- If the user filled out the "Urbit" field for a contact, that contact will have a `@p` key, and therefore be associated with another Urbit user. Internally we call these "Mars" contacts.
- If the user did not fill out the "Urbit" field, the contact is given an arbitrary `@t` key. Internally we call these "Urth" contacts. Urth contacts are just for personal record-keeping and will not sync to any other user's profile.

It's worth noting that a contact's key can change if the user adds, edits, or deletes the contact's `@p`.
The user can do this by editing the "Urbit" field in the UI, or by poking `%whom` with the `%mod-contact-ship` action.


## contact

```
+$  contact
  $:  info=(map @tas info-field)
      profile=(unit profile)
  ==
::
+$  info-field
  $%  [%text @t]
      [%date @da]
  ==
```

`info.contact`: Contact info created by the user for their contact. A map of field key (ex: `%first-name`) to value (ex: `[%text 'John']`).

`profile.contact`: Contact info imported from another user's profile.
A contact may not have a profile if that contact doesn't have a `ship`, doesn't have %whom installed, or the profile hasn't come through via the subscription yet.


## profile

```
+$  profile
  $:  info=(map @tas [value=info-field access=access-level])
      fields=(map @tas field-def)
  ==
::
+$  access-level  ?(%public %mutual)
::
+$  field-def  [name=@t type=field-type-tag]
::
+$  field-type-tag  ?(%text %date)
```

`info.profile`: Map of field key to value, however unlike `info.contact` each value also includes `access`.
- `%public`: this profile field is visible to anyone who adds that user as a contact.
- `%mutual`: this profile field can only be seen by users who are mutual `%pals`.

`fields.profile`: A map of field definitions created by the other user.
This is included in profiles so we can know what display names to use for fields not known by the local user.
For example, profile could have a custom field `%anniversary` with the `field-def` `['Marriage Anniversary' %date]`.


## self

```
+$  self
  $:  info=(map @tas [value=info-field access=access-level])
  ==
```

`self` is the user's own profile. Unlike the `profile` type, it does not include `field-defs` because `self` is only used by the local user.
